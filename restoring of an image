#restoring of an image

import numpy as np
import cv2
img = cv2.imread('cat_damaged.png')
mask = cv2.imread('cat_mask.png', 0)
dst = cv2.inpaint(img, mask, 3, cv2.INPAINT_NS)
cv2.imwrite('cat_inpainted.png', dst)


#adding noise

import cv2
import numpy as np

# Load the image
img = cv2.imread('dog.jfif')

# Generate random Gaussian noise
mean = 0
stddev = 180
noise = np.zeros(img.shape, np.uint8)
cv2.randn(noise, mean, stddev)

# Add noise to image
noisy_img = cv2.add(img, noise)

# Save noisy image
cv2.imwrite('noisy_img.jpg', noisy_img)




#reducing noise

import matplotlib.pyplot as plt
from skimage.restoration import denoise_tv_chambolle
noisy_image=plt.imread('d1.jfif')
denoised_image=denoise_tv_chambolle(noisy_image,multichannel=True)
plt.title('Noisy image')
plt.imshow(noisy_image)
plt.show()
plt.title('Clear image')
plt.imshow(denoised_image)
plt.show()


#reducing noise while preserving image

import matplotlib.pyplot as plt
from skimage.restoration import denoise_bilateral
landscape_image=plt.imread('d1.jfif')
denoised_image=denoise_bilateral(landscape_image,multichannel=True)
plt.title('Noisy image')
plt.imshow(landscape_image)
plt.show()
plt.title('Denoised image')
plt.imshow(denoised_image)
plt.show()
